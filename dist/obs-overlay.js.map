{"version":3,"sources":["../src/lib/directive.ts","../src/lib/dom.ts","../src/lib/part.ts","../src/lib/template.ts","../src/lib/template-instance.ts","../src/lib/template-result.ts","../src/lib/parts.ts","../src/lib/default-template-processor.ts","../src/lib/template-factory.ts","../src/lib/render.ts","src/lit-html.ts","obs-overlay.js"],"names":["isDock","location","hash","substring","isOverlay","window","addEventListener","document","body","setAttribute","Overlay","state","html","update","attachShadow","mode","storageId","pathname","render","storage","localStorage","getItem","JSON","parse","key","querySelectorAll","ele","innerHTML","template","shadowRoot","HTMLElement","Dock","setup","setItem","stringify","styles","constructor","customElements","define","OBSOverlay"],"mappings":";;;;;;;AOmBA,APnBA,ACAA,ACAA,AIkBA,AGAA,ALAA,ACAA,AFlBA,AQAA;AHmBA;ADnBA,ADmBA,AGAA,ALGA,ACFA;AGpBA;AFoBA,AGCA,ALrBA,ACAA;;ACsBA,AGtBA;;AHuBA;;AACA;;AAxBA;ANoBA,MAAM,UAAU,GAAG,IAAI,OAAJ,EAAnB;AAOA,ACLA,ACsBA,ACxBA;;AIGA;ANEO,AOkBP,MPlBa,YAAY,GAAG,MAAM,CAAC,cAAP,KAA0B,SAA1B,IACvB,MAAM,CAAC,cAAP,CAA4C,yBAA5C,KACG,SAFD;AAIP,ACmBO,AElCP,ACAA,AFUO,MDwBM,ACxBA,MAAM,EDwBE,CCxBC,EDwBE,EAAjB,KCxBwB,MAAM,CAAC,IAAI,CAAC,MAAL,EAAD,CAAN,CAAsB,KAAtB,CAA4B,CAA5B,CAA8B,IAAtD;AIED,ALwBN,ACxBA,MIAa,wBAAP,CAA+B;AACnC,AEbF;ADiCM,AHzBN,MAAM,GGyBU,UHzBG,GAAG,EGyBhB,CAA0B,CHzBN,KGyBpB,EAAgD,SHzBtB,GAAhC;AG0BE,AJxBF,ACAA,MGwBM,aAAa,GAAG,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,IAA1B,CAApB;ACzBK,MAAM,KAAK,GAAG,IAAI,OAAJ,EAAd;AP8BA,AO5BP,ADwBE,MNIW,AMJP,ONIc,GAAG,EAAhB,CMJY,KAAK,SAAtB,EAAiC;AAC/B,ALpBG,IKoBH,ELpBS,UAAU,CKoBN,ELpBS,CKoBN,MLpBa,MAAM,KAAhC;AFIA,AKpBP,AEqCM,AJvBA,MHMO,AOiBP,AJvBO,YIuBK,CPjBQ,COiBN,EPhBhB,AGPE,CHOD,AGPwB,CIuBL,OAAJ,CPhBhB,COegB,CPdf,KADD,EAEC,GAAA,GAAiB,IAFlB,EAGC,MAAA,GAAoB,IAHrB,KAGmC;AACjC,AOaA,AJlBJ,ACNI,AFIC,ECEL,IIkBI,AHxBO,AFIA,GFOA,IGLX,CHKgB,AGJZ,CIiBS,EAAE,ALpBO,EFOD,CIXjB,AFIqB,CKoBN,AHxBM,CJWrB,AGLJ,EHK0B,AOaX,AJjBS,ADHK,MAAJ,CAAW,ECEpC,CDFuC,CCInC,KDJyC,ECE7C,EAE0B,ADJuB,UAAU,EAAlC,CAApB;AFQC,AOUY,AJrBD,ACKjB,AFAF,EEAE,GGgBE,IJrBe,CHWL,CAAC,EINb,CJMgB,AILZ,EDNa,GHWK,AGX4B,CHW3B,CGXN,ACKjB,EACmC,MADnC,EJMM,AIJF,IAFJ,EAEkB,SAFlB,EAE8C;AEA9C,ANKM,AKbD,AE0BH,AJjBA,ACAA,EEDF,ENKM,AOaJ,EF1BS,GFSJ,ACAA,IJIQ,CAAC,EIJd,CCToB,AFSpB,CIiBc,CAAC,AHjBA,CCTS,AFSR,EIiBhB,CAAmB,EF1BI,CLanB,AIJJ,CJI2B,CMLH,AHCxB,CGAE,ADT4D,AE0BrC,CAAC,EPbtB,EAA+B,AOanC,EDlBwB,ACkBQ,EDjBZ,ENIhB,EMLoB,EACU,KCiBlC,EDlBwB,EAEtB,OAFsB,EAEA;AACxB,ANGI,AKbN,AE0BC,AJjBC,ACAA,IJII,KAAK,AKZP,AFQG,ACAA,CECC,ENGM,CAAR,CKZG,CDQP,CECY,EHDZ,ACAc,CECC,ADTH,EFQK,EGCE,ADTjB,CCSkB,AFDpB,CECmB,CAAnB,CDRE,EAAE,CFOJ,MEPW,KAAP,KAAiB,QAAjB,IAA6B,OAAO,KAAP,KAAiB,UAAhD,CAFJ;ALcK,AKXN,AFOG,ACAA,CCXG,QFWE,ACAA,IAAL,GDAA,ACAY,GDAG,CCAf,MDAA;AGCA,ANIC,AOaH,AJjBC,ACAC,CJNG,KOuBD,EDjBE,CFAC,KEAK,ACiBA,GAAG,CHjBb,CEAe,EFAE,CEAjB,EAAoB,MCiBM,AHjB1B,CGiB2B,YAAd,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,CAAf;ADhBI,ANKN,AILG,AFJI,MAAM,MIID,SAAS,GAAG,EJJS,EIIL,CJJQ,OAA7B,gBIIiB,CAAsB,OAAtB,EAA+B,IAAI,CAAC,KAAL,CAAW,CAAX,CAA/B,EAA8C,OAA9C,CAAlB;AACA,ACgBJ,AJhBA,ACCA,AFJF,ECGE,IIgBI,EJhBE,CAAC,IGAI,CCgBC,CJhBN,EAA+B,EIgBpB,GDhBG,CAAC,KAAjB,ACgBJ,EAA4B;ADfzB,ADVE,AE0BH,AJhBA,MEVS,EFUL,CAAC,EIgBE,CJhBC,CAAR,GEVmB,GAAI,AE0BvB,KF1BsB,IAA+C;AACvE,AE0BC,GAbmD,CAepD,KF5BO,KAAK,CAAC,OAAN,CAAc,KAAd,KACH;ACSF,ADRE,AE2BJ,AJnBE,GERG,EAAE,GCQD,CHAC,CERK,ICQA,ADRK,CFQJ,IGAI,ADRa,AFQ5B,CER6B,ECQ7B,CHAmB,CGAC,EDRe,CAAC,CFQZ,OERI,AFQ5B,CERG,CAFL,AFUmC;AGC/B,ADRL,AFQK,CEZC,SFYG,GGAG,CAAC,AHAA,IGAI,CHAC,SAAb,EAAwB,IGAhB,CAAc,OAAd,EAAuB,IAAI,CAAC,KAAL,CAAW,CAAX,CAAvB,EAAsC,OAAO,CAAC,YAA9C,CAAD,CAAP;AACD,ADPL,AFOQ,ACAN,EAAA,MDAM,CCAC,GDAG,ACAH,CDAI,QAAL,CAAc,MAAM,CAAC,CAAD,CAApB;AIkBN,AJjBK,ACAH,AFLE,MAAO,EKsBL,EHjBE,CGiBC,AHjBA,GGiBG,AHjBA,AFLR,CAAe,IEKF,CGiBC,CAAC,KHjBP,CAAa,CGiBb,CAAe,IAAf,AHjBA,CGiBoB,EHjBE,CAAhC,aGiBU,CAAZ,CAjBoD,CAmBpD;ADnBE,ANGG,AIFH,AFFF,EAAA,IFIW,EMHL,AFCA,IAAI,CFFV,CICY,AJDA,CEEC,EJES,AIFpB,EEDe,CNIf,AELF,CFKG,CMJD,AJDkC,EICd,KJDtB,CFKE,CEL8D,CFK5C,KAAlB,EAAoC,GAAA,GAAiB,IAArD,KAAmE;AMHjE,ANIA,AQZC,AD2BL,AJnBI,ACCF,AFNO,EKwBT,IC3BW,ALQP,CAAC,CCCC,CJGK,AETF,CKwBD,EC3BS,CFQN,ACmBA,CDnBC,ANII,AETP,CMFP,CAAC,CNE8B,CIKjB,CNIK,AETZ,GFSL,AQXF,ERWwB,AQVvB,AJOmB,EGkBE,CAAC,AHlBA,KAAvB,CIRA,EAEC,CDwBQ,CAAwB,GAAxB,CAA4B,CC1BrC,ED0BS,CDnBC,ACmBZ,CDnBqC,CELE,MFK3B,EAAkC,IAAI,CAAC,KAAL,CAAW,CAAX,CAAlC,EAAiD,OAAjD,CAAD,CAAP;AACD,ANIG,AQTF,ALKD,ADFD,MMHM,GNGD,CFMK,AQTA,CRSC,EQTE,CRSC,EENd,EMHkB,CRSE,AQTD,ANGJ,CFMM,EQTR,CAAU,GNGvB,KFMI,CQTS,CAAX;ARUE,AOcN,AHjBE,AFFA,IFKI,EOcF,GHjBG,CFFC,GFKO,AIHJ,CJGK,AOcJ,AHjBA,GAAG,CAAb,CGiBe,CHjBC,CAAC,EFFE,CEEC,CJGhB,AIHJ,CJG0B,AELI,CEEP,CGiBzB,AHjB0B,AFFxB,EKmB0B,AHjB1B,CJGI,CIHwB;AED5B,ANKI,AQVF,ADwBF,AJnBA,ACEE,AFFF,IFKI,EQVE,GRUG,AGLJ,CGAC,AELI,ANKJ,EFKM,AIHJ,CJGJ,AIHK,EIPM,ALKJ,ADAA,CEEC,EFFU,CIAP,AHAf,CDAA,CEEiB,AFN6C,CII5C,AJClB,CCDmB,CKLjB,EFKoB,AELI,ELKF,ACEZ,CAAa,CAAb,CAAV,CAD0B,CAE1B,EDHF,EAAiC,cGAf,CAAuB,OAAvB,EAAgC,IAAhC,EAAsC,OAAtC,CAAlB;AACA,ANKG,AQVC,ADwBJ,AJnBE,ACGA,IGgBF,MJnBM,CGAC,CCmBC,EJnBE,CImBC,IAAI,AJnBA,CGAC,CAAC,KAAjB,AELgB,ELKd,EAAwB,KKLtB,EAAuB,ADwBhB,CAAa,MAAb,ECxByB,ADwBJ,CCxBK,KDwBC,CAAC,ICxBnC,cDwB4B,EAArB,CAAX,CAF0B,CAG1B;ADnBD,ANKE,AQVG,ALKA,ACGF,AFHF,CFFG,GQHC,ILKA,CKLK,CAAC,ANKJ,ECAE,CKLJ,ALKK,CKLK,ENKF,GCAR,ADAW,IMLX,EAAqB,ENKF,CAAC,CMLK,GAAG,IAAI,QNKrB,CACX,MMN4B,CAAY,ANMjC,CAAC,KMNgC,CAAA,CNK7B,EAEX,GMPwC,CAAA;AFM9C,ADTI,AGIyB,ADwB3B,AJnBG,ACGD,AFFM,IKkBR,EF5BS,AGIkB,WDwBd,CAAC,GCxB4B,EAAf,CHJzB,CAAyB,EE4B3B,CAAwB,GAAxB,CAA4B,GAA5B,EAAiC,QAAjC;AFrBF,AGJ8C,AD0B7C,AJnBE,ACGC,AFLa,EGDjB,CEJoD,CA4BpD,CC5B8C,CNQxC,CMN0B,GNGf,EAIX,CGLN,CAAY,AGJkC,CAAZ,CAA5B,CNKW,CAAf,CAN8D,CAW9D,CGNF,EAA8B,IAA9B,EAA4C,OAA5C,EAA0E;AAF1E,AGEM,ALIL,ACGG,AFAF,IMPI,IAAI,CHFV,AGEW,KHFX,GAAQ,EGEF,CAAgB,CHFtB,QGEM;AHCJ,AGAG,AJOD,AFAF,SGPK,OAAL,GAAe,OAAf;AACA,AEuBF,AJnBA,ACGI,EGgBJ,AJnBA,MAAM,CEJC,EFID,EEJJ,EEuBW,CFvBC,AEuBA,IFvBZ,QEuBF,CAA2B,GAA3B,CAA+B,MAAM,CAAC,OAAtC,EAA+C,QAA/C;AFtBE,AGDE,ADwBJ,AJnBE,ACGE,AFDF,EMPE,IAAI,CAAC,CNOH,CGNC,AEuBA,MCxBH,CHCF,AGDgB,CDwBlB,EFvBiB,EHME,CMPf,ENOkB,CAApB,CGNA;ACGF,ADFE,AGDE,ADwBL,AJnBG,ACGE,AFDF,EIJF,AEHI,IAAI,CAAC,CNOH,CGNC,IGDH,ANOO,CGNT,EHMY,CGNC,AHMA,CAAb,CGNA,GCEkB,CAAC,OAAD,EAAuB;AACzC,APSG,ASZF,ALKD,ACGE,AFDF,CMtBG,KT2BM,EGLL,GIJG,IAAI,APSO,EGLL,CHKqC,CAA7B,CGLL,CAAhB,EHMC,CAAC,GAAG,GOVE,CAAa,APUnB,KAAuB,EOVjB,CAAP;AACD,APUG,AMbF,AEuCG,AJlCH,ACGE,AFDF,MKgCS,ER1BD,CAAC,AMbJ,CHOC,EHMM,CAAC,AMbJ,CNaK,AMbJ,GNaO,AMbJ,CAAb,EAAgB,AEuCO,CR1BV,AMbI,CNaf,CQ0BwB,CFvCN,GEuCU,GAAJ,CFvCC,CAAC,AEuCzB,MFvCiB,GAAiB,CAArC,EAAwC,CAAC,EAAzC,EAA6C;ANc3C,AMbC,AFKH,ACGE,AFFK,EHOL,IGPK,KGNC,CNaI,CAAC,AGPP,GHOJ,AMbC,CNac,AMbiB,CNahC,AMbC,ENaiB,EMbmB,ENarC,GMb0C,WAAL,EAApC;AC/B8B,AP6C/B,AMbD,AFKD,ACGE,AFHc,MAAA,GHQP,CAAP,EGRoB,EAAE;AHSvB,AMbF,AFKC,ACGE,AFJuB,CHItB,OGJsB;AGF3B,AFIE,ACGE,AFLsB;AIDrB,AHIH,ACGE,AFNI,MIDG,EJC2B,MAApC,gBIDiC,GAAG,IAAI,wBAAJ,EAAjC;AHKH;AJOG,AINH,ACEE,AFNF,MHUS,KGVF,CEMC,KLIY,GAAI,AGVR,CHUO,EKJJ,AFNA,EHUqC,CKJlC,CAAC,CAAC,CFNxB,EAA2B,QEML,CAAc,MAAd,CAApB,CAnB0B,CAoB1B;ALIJ,AINE,ACGE,AFPA,SHUG,GGVG,IHUI,AGVA,CHUP,EGVU,GHUG,GGVG,CAAC,MHUjB,EGVU,EHUiB,AGV9B,UHUwC,CAAC,GAAX,CAAe,CAAf,CAAlC;AACD,AMZW,AFMR,ACGE,CLCC,CMVK,WAAW,GAAA;AACnB,AFMA,ADLE,UAAI,CGDC,GHCG,CGDC,IHCI,IAAb,EAAmB,GGDd,CAAkB,IAAlB,CAAP;AACD,AFMC,ACEE,AFPE,MEOF,gBAAgB,GAAG,CAAC,WAAW,GAAG,CAAC,CAAf,IAAoB,gBAArB,KACf,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,WAAW,GAAG,CAA/B,MAAsC,CAAC,CAD3C,CAvB0B,CAyB1B;ADHF,ACIE,AFTE;AGAI,AFMR,ACIE,AFTE,EGDI,SAAS,GAAA;AACjB,AFMA,ADLI,AQpER,SAASA,CLmEC,KKnEV,ELmEiB,CKnEC,ELmEE,KAAK,OAArB;AACA,AFMA,ACGE,AFRE,AQpEJ,QRoEI,CQpEGC,CLmED,CAAC,CDSC,ECTE,AHCA,CAAC,EQpEI,CAACC,GLmEC,CAAC,AKnEX,CAAcC,GN4EC,AFRlB,EGDM,CDSe,AFRA,EGDE,CAA3B,AKnEO,CAAwB,CRoED,AQpEvB,CRoEwB,GAAN,EAArB,AQpEkC,MAAtC,gBN4EgD,IAAvB,CAA4B,CAA5B,CAAvB;ACRF,AFMA,ADLI,AQpEP,QLmEO,IAAI,GAAG,EAAX;AFOA,ACEE,AFPC,UEOG,cAAc,KAAK,IAAvB,EAA6B;ACP/B,AFMA,ACEI,AM3ER,SLmES,AKnEAC,ILmEI,CAAC,GAAG,CAAb,AKnEJ,ELmEoB,CAAC,AKnEA,GLmEG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,AFMF,ACEI,AFRF,AQnEF,MLmEE,AHAA,GQnEKH,CLmED,CHAC,GGAG,GKnEK,CAACC,GLmEC,CAAC,AKnEX,CLmEU,AKnEIC,CLmEnB,QKnEK,CAAwB,CAAxB,MAA+B,SAA/B,IAA4C,CAACF,QAAQ,CAACC,IAA7D;ALoEE,AFMF,ACEI,AM3EP,YLmEW,IAAI,GAAG,KAAK,KAAL,CAAW,CAAX,CAAb;AFOF,ACEI,AFRF,UAAI,IAAI,CAAC,QAAL,KAAkB;AGAtB,AFOF,ACEI,AFTsB,AQlE9BG,MAAM,CAACC,GLkEG,IAAI,KAAK,IKlEnB,CAAwB,ILkElB,EAAwB,AKlE9B,EAAgC,YAAM;ALmE9B,AFOJ,ACEI,AFVF,AQjEFC,EAAAA,MN2EI,AFV+C,EQjE3C,CAACC,CN2ED,ECTE,CAAC,AKlEX,CN2EY,AM3EEC,CN2ED,CCTC,GDSG,CCTC,CAAC,KAAf,AKlEJ,CAA2B,QN2EM,AM3EjC,EAAqC,CN2ED,CM3EpC,YN2EiC,GAAmB,oBAAvC,CAAT;ADDJ,ACEG,AFVC,AQjEP,CAFD,MNsEM,MAOO,CFVA,IAAgB,CAAC,aAAjB,EAAL,EAAuC;AGCvC,AFQJ,ACEI,AFVE,YGAE,MHAI,KGAO,CAAC,CAAD,CAAX,EHAc,EGAI,CAAC,AHAD,IAAgB,CAAC,KGAN,CAAC,CAAD,CAAjC,EAAsC,AHApC;AGCA,AFQN,ACEI,AFVE,IQjEGC,MLiEH,IAAI,IAAI,AHAF,OGAS,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,MAAM,CAAC,CAAD,CAA1C;AACD,AFQL,ACEI,AFXS,SGDT,KHCS,CGCF;AACL,AFQN,ACEI,AFZQ,QEYR,IAAI,GCVG,CDUC,AFZW,CEYV,CAAC,GCVG,CAAX,EDUM,CAAS,CCVC,ADUV,AFZN,CGEA,AHJqC,CEcnB,AFXlB,CGCmB,aDUa,CAAC,KAA3B,IAAoC,cAAc,CAAC,CAAD,CAAlD,GACJ,cAAc,CAAC,CAAD,CADV,GACgB,8BADhB,GACuC,cAAc,CAAC,CAAD,CADrD,GAEJ,gBAFJ;ACTI,AFQR,ACIG,AFbG,YGCE,IAAI,IAAI,OAAO,CAAP,KAAa,QAAb,GAAwB,CAAxB,GAA4B,MAAM,CAAC,CAAD,CAA1C;AACD,AFQP,ACIC,AFbK;AGED,AFQL,ADTM;AGEH,AFQH,ACGA,AFZM,IEYN,IAAI,IAAI,KAAK,OAAL,CAAa,CAAb,CAAR;ACVC,AFQD,ACGA,WAAO,IAAP,cMjFgBC,OAAO;APgFvB,ACED,AFbO,AQpEF,UP+EE,MDXI,CQpECC,CP+EG,GAAG,ADXF,GAAG,CAAZ,KQpEF,WPgFA,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAA8B,SAA9B,CAAwC,IAAxC,CADa,GAEb,QAAQ,CAAC,UAAT,CAAoB,KAAK,QAAL,CAAc,OAAd,CAAsB,OAA1C,EAAmD,IAAnD,CAFJ;AERA,AFYA,AOlFC,ILsED,IAAI,EFYE,EEZE,GFYG,GAAW,CEZP,CAAC,AFYhB,CEZe,CAAf;AACA,AFYA,ACDF,AFdQ,EEcR,QDCQ,CEZC,IAAP,AFYW,EDfA,CCeG,ECDE,CFdD,CAAC,CCeG,ACDH,EFdG,CAAb,EAAgB,CAAC,ECeT,CAAc,ADfF,KCe1B,CA5CI,AD6BE,CCgBN,CDhBkC,CAAC,EAA7B,EAAiC;AGIxC,ADWC,AFdQ,UEcF,QAAQ,AFdF,GEcK,KFdG,CAAC,EEcI,CAAC,OFdK,CAAC,CAAD,CAAV,CAAc,EEclB,CAAuB,CFdpB,EAAqB,OEcxB,CAAjB,YFdoB,CAAZ,EAAwD;ACgBhE,ACDA,AFdU,AQpEV,INkFA,MDCM,ECDE,CAAC,GDCG,ADfF,GCeK,EDfA,AQpED,CNkFd,GAAqB,EDCE,CAAC,ECDE,OAAL,EAArB,KDCe,CACX,QADW,EAEX;AEbN,AFaU,ACFR,AFdS,AQrEK,ELwEhB,MAAM,GAAA,ADWG,QAAP;ACVA,AFUe,ACChB,AFdQ,MCgBH,EEbA,EFUW,EAIX,CEdK,IFUM,CEVf,AFUA,EEVgB;AACd,AFcF,AOxFc,QPwFV,GEdG,KAAL,CFcW,EEdE,CFcC,CAAhB,GEdE;AACA,AFcF,ACjFuB,AF+DjB,QCkBF,GEdG,MFcM,CEdX,CAAa,AHJF,CCkBG,CAAhB,GDlBkB,KAAK,CAAjB,CGIJ,CAA0B,AHJF,KGIO,IAA/B,EAAqC,KAAK,SAAL,EAArC;AACD,AFcD,ACHJ,AFfY,AQvEJ,QPyFA,IAAJ;AEbD,AFcC,ADlBQ,AQtEJP,IAAAA,IPwFA,EOxFM,CAACC,CPwFH,GAAG,MAAM,CAAC,KOxFd,CAAwB,EPwFjB,EAAX,CAtDI,CAuDJ,GOzFI,EAAmC;ARuE/B,AQvE+B,aAAM,MAAKO,CRuEpC,KQvE+B,EAAN,MRuEZ,GAAG,OAAO,CAAC,SAAD,CAA7B,CAHkB,CAIlB;AGnDmB,AFqE3B,AO1FuC,KAAnC,MP0FG,SAAS,GAAG,KAAK,CAAC,MAAzB,EAAiC;AEbrC,AFcM,ADlBM,AQ5EM,MP8FZ,IAAI,GAAG,KAAK,CAAC,CDlBD,IAAI,GAAG,CCkBP,CAAZ,oBDlByC,CAAC,IAAvB,CAA4B,aAA5B,EAA4C,CAA5C,CAAb,CALkB,CAMlB;AACA,AQ1EP;AP2FC,ADhBM,UCgBF,CAAC,oCAAqB,IAArB,CAAL,EAAiC;AAC/B,ADhBI,aCgBC,OAAL,CAAa,IAAb,CAAkB,SAAlB;ADfI;ACgBJ,QAAA,SAAS,uBO3FO;AP4FhB,ADhBI,AQ3EJ,WAAKC,SR2EK,GQ3EV,CAAkB,eR2EW,GACrB,IAAI,CAAC,WAAL,KAAqB,oBADzB;AGCN,AFgBC,ACLD,AFVM,AQ7EgBC,ML4Ef,ADWA,CDDwB,CAQ/B,AO9FsBA,IAAI,EAAE,KL4E5B,CAAoB,AHCR,GEUZ,SAAiC,EFVP,GACf,IAAgB,CAAC,IES5B,CAA+C,OFTpC,CAA8B,mBAA9B,CADL;AGGV,AFeI,ACPJ,AFTW,AQ/Ea,ELgFxB,ADQA,KMxFM,ENwFC,GAAA,CCRP,CAAY,AHDD,IAAgB,CAAC,IGC5B,EAAyC,SHD9B,CAAiC,mBAAjC;AGDX,AFkBI,ACPF,AFTQ,AQ9EJ,SL4EN,EDWS,AMvFEC,GL4EX,GAAiB,EDWA,CFTD,AQ9EV,GAAiBf,ENuFA,CCXvB,CHEuB,GAAG,CQ9EK,CNuFd,AMvFegB,ENuFA,MMvF1B,ENuFJ,EFTsC,CAAC,KAAf,CAAqB,WAArB,CAAhB;AGCR,ADSD,AFTS,AQ9EJ,SL8EC,EK9EIN,KAAL,EL8EJ,CHAa,AQ9EI,EL8EA,AK9Eb,GR8EI,CAAW,IAAX,CGAR,AHAwB;AGCzB,AHD0B,AQ5ErB,UAAG,CAACP,KR4EiB,IAAI,AQ5EZ,ER4Ec,AQ5E3B,EAAiB,SR4EG;ACgBtB,ACLJ,AFX8C,AQ1ExC,ENqFN,SMrFWS,EP0FA,GDhBmC,CQ1ExC,GNqFY,CFXQ,CCgBN,CCLF,EDKK,IAAI,CAAC,KAAxB,EAA+B;AEbnC,AFcM,ACLJ,AFZmD,AQzE/C,EL4EN,MFcM,EEdE,ADSA,CCTC,AK5EEK,KL4EH,AHH6C,CCiBtC,AO1FT,CL4EiB,ADSP,EFZU,CEYP,MAAM,kBAAN,EAAjB;ACRA,ADSA,AFbyD,AQxExD,QL4EG,EDSE,GCTG,GHJgD,CEa5C,CCTC,EDSE,GFbgD,EAAE,GEa1C,CAAC,GCTrB,IDSJ,CCT2B,CAAC,WAAW,CAAC,KAAD,CAAZ,IAAuB,KAAK,KAAK,KAAK,KAA7D,CAAJ,EAAyE;AACvE,AFaE,ACJJ,AFdwB,UEclB,CCTC,CFaC,GDlBA,CGKN,AFaW,CAAC,EEbC,CDSC,GAAG,CCTjB,CADuE,AFcjE,CEZN,IFYyB,ACJD,CAAC,SDIvB,CCJJ,CDIuC;AEXrC,AFYI,ACJN,AFdQ,IEcR,MDIM,CCJC,CAAC,EFdA,CCkBG,CAAC,IAAN,CAAW,ECJjB,AFdiB,CEcG,CDId,EDlBe,OEcrB,AFd4B,CAAC,MAAR,GAAiB,CAA9B;AGON,AFYI,ACJN,AFdO,UCkBD,MAAM,CAAC,WAAP,ACJQ,CMtFL,EP0FmB,IAA4B,ACJxD,CDIyD,CCJlC,MDIjB,ICJ2B,CAAC,UAAlC;ADKK,ACJL,AFdK,AQxED,UAAMC,CNsFH,MMtFU,ENsFjB,CMtFoBC,YAAY,CAACC,OAAb,CAAqB,KAAKL,SAA1B,CAAhB;AL8EF,ADSH,UCTO,CAAC,4BAAY,KAAZ,CAAL,EAAyB;AACvB,AFYA,ADlBA,AQvEA,UAAGG,EPyFC,CEZC,AFYA,CDlBA,GCkBI,AOzFT,CRuEqB,CAAC,AQvEV,CPyFA,EEZZ,CAAe,GFYG,ADlBb,CCkBc,CEZnB,GAAuB,AHNW,IGMlC,AFYY,EAAR,IDlBJ,ECkBmC,ADlBW,ICkB9C,EAAyC;AEX1C,AFYG,ACjB2C,AFD3C,AQvEE,YRuEF,CQvEOR,IRuEF,CAAC,AQvEJ,GAAaW,CRuEf,CAAW,EQvEQ,CAACC,CRuEpB,IQvEe,CAAWJ,OAAX,CAAb;AL8EP,AFYK,ADlBA,AQvED,YRuEC,MAAM,CAAC,WAAP,GAAsB,IAA4B,CAAC,OAAnD;AGOP,AFYO,ADlBD;ACmBC,ADlBH,AQvEC,SR+BF,EQ/BM,IRuEC,AQvEGK,GAAR,CRuES,GQvEM,CRuEF,CAAC,GQvEMb,KRuEX,AQvET,EAA2B,GRuEA;AGOjC,AFYQ,ADnB2B,AQvEF,EL8EjC,MAAM,EFYE,CEZF,KFYQ,CAAC,WAAP,GAAqB,KAAK,CAAC,GAAN,EAArB;AEXN,AFYM,ADpBG,AQvEsB,QRuEwB,ECoBjD,CEZC,GFYG,GAAG,MAAM,CAAC,QAAP,EAAP,KEZa,KAAK,KAAjB,CAAP,EAAgC;AAC9B,AFYG,ADpBD,AQxE2B,YLgFvB,IHRE,IAAI,CGQG,EHRC,CGQE,GHRW,CAAC,CGQP,GHRrB,EGQF;AACA,AFYC,OAzB8B,CA2B/B,GEdK,KAAL,GAAa,cAAb;AACA,AHTE,AQzE2B,MLkF7B,QHTM,CGSG,CAAC,EHTA,CAAC,CGSF,CAAT,KHTM,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AGUlC,AHTK,AQzEE,kBRyEI,MAAM,GAAG,IAAI,AQzEF,CRyEG,IQzEEc,MRyEtB,UQzEiB,CAAsB,iBAAeD,GAAf,GAAmB,GAAzC,CAAf,8HAA8D;AP+FpE,ADrBI,AQ1EgE,UP+FhE,IAAI,CAAC,CO/FKE,ER0EJ,CCqBN,AO/FgE,KP+FlD,CDrBD,GAAG,ECqBpB,EAA0B,ADrBF,CAAC,KAAL,CAAW,WAAX,CAAhB;AGSN,AFaI,ADrBE,AQ1EMA,QLkFR,IKlFQA,CLkFH,CFaC,CO/FK,CAACC,ELkFZ,AFaU,ADrBF,GCqBK,EEbE,EKlFP,CP+FU,CDrBD,CQ1EO,ER0EJ,GQ1EShB,EP+FhB,CAAe,CEbhC,AHR+B,CAAC,AQ1EJ,CLkFC,AKlFUa,GAAX,CAAhB,CR0EY,GAAiB,CAAnC,CAH6B,CAI7B,MCoBW,CAAoC,KAAK,OAAzC,CAAb;AEZF,AFaE,ADpBE,AQ3EG,QP+FL,IAAI,CAAC,eAAL,CAAqB,IAAK,CAAC,eAA3B;AEZH,AKtF8B;APmG3B,ADpBE,AQ/EyB,aPmGtB,IDpBE,GCoBP,CAAa,ADpBF,CAAC,GCoBZ,ADpBe,CCoBG,ADpBhB,EAAgB,CAAC,CCoBnB,EDpBsB,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AGQ1C,AFaG,ADpBK,AQhFuB,OPgG7B,EET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,IAAgB,CAAC,EGkBvB,EHlBM,CGkBW,AHlBW,OAAtB,CAA8B,MAA9B,EAAsC,CAAC,GAAG,CAA1C,CAAN,MAAwD,CGkBrE,AHlBsE,CAAhE,EAAmE;AACjE,AQxEA,cAAM,kBAAN;AL0FR,AHjBQ,AQxEH,SLyFA,OAAL,GAAe,GAAG,CAAC,OAAnB;AACA,AHjBQ,AQxEP,ILyFD,GAAG,CAAC,OAAJ,GAAc,KAAK,SAAnB;AACD,AHjBS;AACA,AOxJZ,mBPwJiB,KAAL,CAAW,IAAX,CAAgB;AGkB1B,AHlB2B,EGkB3B,QAAQ,CAAC,KAAD,AHlBmB,EGkBJ,EHlBQ,EAAE,KQzHjBlB,CRyHU,MQzHH;AL4IrB,AHnBuC,AQxHnC,SL2IC,OHnBkC,CQxH5BC,IRwHiC,EGmB5C,AHnB8C,CAAC,EGmBzB,IK3IlB,CL2IJ;AACD,AHpByB,AQ9GvB,eR8GO;AACA,AOhJZ,cPgJY,SAAS;AGqBnB,AHpBS,AO/HX,EJmJE,MAAM,GAAA;AACJ,AHpBK,AO/HT,WJmJW,oBKnIW,QLmIC,KAAK,cAAjB,CAAP,EAAyC;AACvC,AHpBC,AQ/GC,ADhBR,YJmJY,KKnIGA,ILmIM,GAAG,KAAK,CKnIrB,aLmIF;AACA,AHpBD,AQ/GA,ADhBL,CAAC,IPZiE,CA6I9D,COjIG,CAAC,GJmJG,cAAL,AInJC,CAAN,EJmJ2B,GInJG,MAAM,CAAC,IJmJhC,aInJ+B,CAAN,GAA4B,EAA1D,CAAD,EAAgE,IAAhE,CAAqE,OAArE;AJoJM,AIlJN,MJkJM,SAAS,CAAC,IAAD,CAAT;AACD;AHnBD,SAAK,MAAM,CAAX,IAAgB,aAAhB,EAA+B;AGoB/B,AHnBE,MAAA,CAAC,CAAC,EGmBE,KAAK,GAAG,AHnBZ,CAAc,AQpIckB,ILuJX,OHnBjB,CAA0B,CAA1B,KGmBF;AHlBC;AGmBD,AHlBD,AO/HI,MAAM,EJiJL,EIjJS,GJiJJ,AIjJO,CAAC,IJiJH,GIjJE,EAAgC,GAAG,MJiJnD,AIjJgB,EJiJQ,GIhJxB,IAAI,8BAAJ,CAAmB,OAAnB,EAA4B,MAA5B,EAAoC,MAApC,EAA4C,kDAA5C,CADG;AJkJD,AKpGNO,AD3CA,cC2Cc,CA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","file":"obs-overlay.js","sourceRoot":"..","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import { html, render } from 'lit-html';\r\n\r\nfunction isDock() {\r\n    return location.hash.substring(1) === 'dock';\r\n}\r\n\r\nfunction isOverlay() {\r\n    return location.hash.substring(1) === 'overlay' || !location.hash;\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n    document.body.setAttribute('loaded', '');\r\n});\r\n\r\nexport class Overlay extends HTMLElement {\r\n\r\n    static template(state) {\r\n        return html`<slot></slot>`;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        window.addEventListener('storage', () => this.update());\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.attachShadow({ mode: 'open' });\r\n\r\n        this.storageId = location.pathname;\r\n        this.state = {};\r\n\r\n        if(!isOverlay()) return;\r\n\r\n        this.update();\r\n        this.render();\r\n    }\r\n\r\n    update() {\r\n        const storage = localStorage.getItem(this.storageId);\r\n\r\n        if(storage) {\r\n            this.state = JSON.parse(storage);\r\n        }\r\n\r\n        for(let key in this.state) {\r\n            for(let ele of this.querySelectorAll('[data-state='+key+']')) {\r\n                ele.innerHTML = this.state[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    render(state) {\r\n        render(Overlay.template(state), this.shadowRoot);\r\n    }\r\n}\r\n\r\nexport default class Dock extends HTMLElement {\r\n\r\n    static styles(state) {\r\n        return html`\r\n            <style>\r\n                :host {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                }\r\n            </style>\r\n        `;\r\n    }\r\n    \r\n    static template() {\r\n        return html`<slot></slot>`;\r\n    }\r\n    \r\n    connectedCallback() {\r\n        this.attachShadow({ mode: 'open' });\r\n        \r\n        this.storageId = location.pathname;\r\n        this.state = {};\r\n        \r\n        if(!isDock()) return;\r\n        \r\n        this.setup();\r\n        \r\n        this.render(this.state);\r\n    }\r\n\r\n    setup() {\r\n        // setup dock\r\n    }\r\n\r\n    updateOverlay() {\r\n        localStorage.setItem(this.storageId, JSON.stringify(this.state));\r\n    }\r\n\r\n    render(state) {\r\n        const styles = this.constructor.styles(state);\r\n        const template = this.constructor.template(state);\r\n\r\n        if(template) {\r\n            render(html`${styles} ${template}`, this.shadowRoot);\r\n        } else {\r\n            throw 'Missing Template';\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncustomElements.define('obs-overlay', Overlay);\r\ncustomElements.define('obs-dock', Dock);\r\n\r\nwindow.OBSOverlay = {\r\n    Dock,\r\n    Overlay,\r\n}\r\n"]}